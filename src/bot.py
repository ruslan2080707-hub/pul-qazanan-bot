import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
from src.db import get_user_by_telegram_id, create_user

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
WEBAPP_URL = os.getenv('WEBAPP_URL')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    telegram_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    referrer_id = None
    if context.args and context.args[0].startswith('ref_'):
        try:
            referrer_id = int(context.args[0].replace('ref_', ''))
        except:
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = get_user_by_telegram_id(telegram_id)
    
    if not existing_user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_user(
            telegram_id=telegram_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            referrer_id=referrer_id
        )
        
        welcome_text = (
            f"üéâ Xo≈ü g…ôldiniz, {user.first_name}!\n\n"
            "üí∞ Pul qazanmaƒüa ba≈ülayƒ±n!\n"
            "üéØ H…ôr g√ºn 0.30 AZN-…ô q…ôd…ôr qazanƒ±n\n"
            "üë• Dostlarƒ± d…ôv…ôt edin v…ô daha √ßox qazanƒ±n\n"
            "üèÜ Reytinqd…ô y√ºks…ôlin v…ô m√ºkafatlar qazanƒ±n\n\n"
            "Oyuna ba≈ülamaq √º√ß√ºn d√ºym…ôni basƒ±n! üëá"
        )
    else:
        welcome_text = (
            f"üëã Yenid…ôn xo≈ü g…ôldiniz, {user.first_name}!\n\n"
            "Oyuna davam etm…ôk √º√ß√ºn d√ºym…ôni basƒ±n! üëá"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
    keyboard = [
        [InlineKeyboardButton("üéÆ Oynamaƒüa ba≈üla", web_app=WebAppInfo(url=WEBAPP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_withdrawal_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ API
    pass

async def handle_deposit_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–ø–æ–∑–∏—Ç–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ API
    pass

async def approve_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    withdrawal_id = int(query.data.split('_')[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from src.db import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        UPDATE withdrawals 
        SET status = 'approved', processed_at = NOW()
        WHERE id = %s
    ''', (withdrawal_id,))
    
    conn.commit()
    cur.close()
    conn.close()
    
    await query.edit_message_text(f"‚úÖ –í—ã–≤–æ–¥ #{withdrawal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

async def reject_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    withdrawal_id = int(query.data.split('_')[2])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from src.db import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        UPDATE withdrawals 
        SET status = 'rejected', processed_at = NOW()
        WHERE id = %s
        RETURNING user_id, amount
    ''', (withdrawal_id,))
    
    result = cur.fetchone()
    
    if result:
        cur.execute('''
            UPDATE users 
            SET balance = balance + %s
            WHERE id = %s
        ''', (result['amount'], result['user_id']))
    
    conn.commit()
    cur.close()
    conn.close()
    
    await query.edit_message_text(f"‚ùå –í—ã–≤–æ–¥ #{withdrawal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã")

async def approve_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    deposit_id = int(query.data.split('_')[2])
    
    # –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from src.db import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        UPDATE deposits 
        SET status = 'approved', processed_at = NOW()
        WHERE id = %s
        RETURNING user_id, amount
    ''', (deposit_id,))
    
    result = cur.fetchone()
    
    if result:
        cur.execute('''
            UPDATE users 
            SET balance = balance + %s
            WHERE id = %s
        ''', (result['amount'], result['user_id']))
        
        cur.execute('''
            INSERT INTO transactions (user_id, type, amount, description, created_at)
            VALUES (%s, 'deposit', %s, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', NOW())
        ''', (result['user_id'], result['amount']))
    
    conn.commit()
    cur.close()
    conn.close()
    
    await query.edit_message_text(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç #{deposit_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

async def reject_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    deposit_id = int(query.data.split('_')[2])
    
    from src.db import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        UPDATE deposits 
        SET status = 'rejected', processed_at = NOW()
        WHERE id = %s
    ''', (deposit_id,))
    
    conn.commit()
    cur.close()
    conn.close()
    
    await query.edit_message_text(f"‚ùå –î–µ–ø–æ–∑–∏—Ç #{deposit_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")

def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(approve_withdrawal, pattern='^approve_withdrawal_'))
    application.add_handler(CallbackQueryHandler(reject_withdrawal, pattern='^reject_withdrawal_'))
    application.add_handler(CallbackQueryHandler(approve_deposit, pattern='^approve_deposit_'))
    application.add_handler(CallbackQueryHandler(reject_deposit, pattern='^reject_deposit_'))
    
    return application

async def send_withdrawal_notification(bot, withdrawal_id, user_info, amount, card_number):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –≤—ã–≤–æ–¥–µ"""
    text = (
        f"üí∏ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{withdrawal_id}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['first_name']} (@{user_info['username']})\n"
        f"üí∞ –°—É–º–º–∞: {amount} AZN\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {card_number}\n"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_withdrawal_{withdrawal_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdrawal_{withdrawal_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=reply_markup)

async def send_deposit_notification(bot, deposit_id, user_info, amount, proof_url):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –¥–µ–ø–æ–∑–∏—Ç–µ"""
    text = (
        f"üíµ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç #{deposit_id}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['first_name']} (@{user_info['username']})\n"
        f"üí∞ –°—É–º–º–∞: {amount} AZN\n"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_deposit_{deposit_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_deposit_{deposit_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    if proof_url:
        await bot.send_photo(chat_id=ADMIN_ID, photo=proof_url, caption=text, reply_markup=reply_markup)
    else:
        await bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=reply_markup)
